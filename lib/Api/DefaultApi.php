<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  BenefitPlus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Benefit Plus payment gate API (version 2)
 *
 * OpenAPI dokumentace k [Platební bráně Benefit Plus v2](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125646355/Dokumentace+k+nov+platebn+br+n+pro+e-shopy+v2).
 *
 * OpenAPI spec version: 2.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BenefitPlus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BenefitPlus\ApiException;
use BenefitPlus\Configuration;
use BenefitPlus\HeaderSelector;
use BenefitPlus\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  BenefitPlus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPost
     *
     * Stornování objednávky ze strany eshopu.
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     * @param  \BenefitPlus\Model\PGv2CancelRequest $body DTO obsahující informace o rušené objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125744719/DTO+PGv2+Cancel+Request) (optional)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BenefitPlus\Model\PGv2CancelResult
     */
    public function eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPost($x_api_key, $eshop_guid, $eshop_order_guid, $body = null)
    {
        list($response) = $this->eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostWithHttpInfo($x_api_key, $eshop_guid, $eshop_order_guid, $body);
        return $response;
    }

    /**
     * Operation eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostWithHttpInfo
     *
     * Stornování objednávky ze strany eshopu.
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     * @param  \BenefitPlus\Model\PGv2CancelRequest $body DTO obsahující informace o rušené objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125744719/DTO+PGv2+Cancel+Request) (optional)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BenefitPlus\Model\PGv2CancelResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostWithHttpInfo($x_api_key, $eshop_guid, $eshop_order_guid, $body = null)
    {
        $returnType = '\BenefitPlus\Model\PGv2CancelResult';
        $request = $this->eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostRequest($x_api_key, $eshop_guid, $eshop_order_guid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BenefitPlus\Model\PGv2CancelResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostAsync
     *
     * Stornování objednávky ze strany eshopu.
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     * @param  \BenefitPlus\Model\PGv2CancelRequest $body DTO obsahující informace o rušené objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125744719/DTO+PGv2+Cancel+Request) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostAsync($x_api_key, $eshop_guid, $eshop_order_guid, $body = null)
    {
        return $this->eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostAsyncWithHttpInfo($x_api_key, $eshop_guid, $eshop_order_guid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostAsyncWithHttpInfo
     *
     * Stornování objednávky ze strany eshopu.
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     * @param  \BenefitPlus\Model\PGv2CancelRequest $body DTO obsahující informace o rušené objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125744719/DTO+PGv2+Cancel+Request) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostAsyncWithHttpInfo($x_api_key, $eshop_guid, $eshop_order_guid, $body = null)
    {
        $returnType = '\BenefitPlus\Model\PGv2CancelResult';
        $request = $this->eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostRequest($x_api_key, $eshop_guid, $eshop_order_guid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPost'
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     * @param  \BenefitPlus\Model\PGv2CancelRequest $body DTO obsahující informace o rušené objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125744719/DTO+PGv2+Cancel+Request) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPostRequest($x_api_key, $eshop_guid, $eshop_order_guid, $body = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPost'
            );
        }
        // verify the required parameter 'eshop_guid' is set
        if ($eshop_guid === null || (is_array($eshop_guid) && count($eshop_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eshop_guid when calling eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPost'
            );
        }
        // verify the required parameter 'eshop_order_guid' is set
        if ($eshop_order_guid === null || (is_array($eshop_order_guid) && count($eshop_order_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eshop_order_guid when calling eshopsEshopGUIDEshopordersEshopOrderGUIDCancelPost'
            );
        }

        $resourcePath = '/eshops/{eshopGUID}/eshoporders/{eshopOrderGUID}/_cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($eshop_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'eshopGUID' . '}',
                ObjectSerializer::toPathValue($eshop_guid),
                $resourcePath
            );
        }
        // path params
        if ($eshop_order_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'eshopOrderGUID' . '}',
                ObjectSerializer::toPathValue($eshop_order_guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eshopsEshopGUIDEshopordersEshopOrderGUIDGet
     *
     * Zjištění stavu objednávky ze strany eshopu.
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BenefitPlus\Model\PGv2EshopOrderState
     */
    public function eshopsEshopGUIDEshopordersEshopOrderGUIDGet($x_api_key, $eshop_guid, $eshop_order_guid)
    {
        list($response) = $this->eshopsEshopGUIDEshopordersEshopOrderGUIDGetWithHttpInfo($x_api_key, $eshop_guid, $eshop_order_guid);
        return $response;
    }

    /**
     * Operation eshopsEshopGUIDEshopordersEshopOrderGUIDGetWithHttpInfo
     *
     * Zjištění stavu objednávky ze strany eshopu.
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BenefitPlus\Model\PGv2EshopOrderState, HTTP status code, HTTP response headers (array of strings)
     */
    public function eshopsEshopGUIDEshopordersEshopOrderGUIDGetWithHttpInfo($x_api_key, $eshop_guid, $eshop_order_guid)
    {
        $returnType = '\BenefitPlus\Model\PGv2EshopOrderState';
        $request = $this->eshopsEshopGUIDEshopordersEshopOrderGUIDGetRequest($x_api_key, $eshop_guid, $eshop_order_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BenefitPlus\Model\PGv2EshopOrderState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eshopsEshopGUIDEshopordersEshopOrderGUIDGetAsync
     *
     * Zjištění stavu objednávky ze strany eshopu.
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eshopsEshopGUIDEshopordersEshopOrderGUIDGetAsync($x_api_key, $eshop_guid, $eshop_order_guid)
    {
        return $this->eshopsEshopGUIDEshopordersEshopOrderGUIDGetAsyncWithHttpInfo($x_api_key, $eshop_guid, $eshop_order_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eshopsEshopGUIDEshopordersEshopOrderGUIDGetAsyncWithHttpInfo
     *
     * Zjištění stavu objednávky ze strany eshopu.
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eshopsEshopGUIDEshopordersEshopOrderGUIDGetAsyncWithHttpInfo($x_api_key, $eshop_guid, $eshop_order_guid)
    {
        $returnType = '\BenefitPlus\Model\PGv2EshopOrderState';
        $request = $this->eshopsEshopGUIDEshopordersEshopOrderGUIDGetRequest($x_api_key, $eshop_guid, $eshop_order_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eshopsEshopGUIDEshopordersEshopOrderGUIDGet'
     *
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     * @param  string $eshop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopOrderGUID}) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eshopsEshopGUIDEshopordersEshopOrderGUIDGetRequest($x_api_key, $eshop_guid, $eshop_order_guid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling eshopsEshopGUIDEshopordersEshopOrderGUIDGet'
            );
        }
        // verify the required parameter 'eshop_guid' is set
        if ($eshop_guid === null || (is_array($eshop_guid) && count($eshop_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eshop_guid when calling eshopsEshopGUIDEshopordersEshopOrderGUIDGet'
            );
        }
        // verify the required parameter 'eshop_order_guid' is set
        if ($eshop_order_guid === null || (is_array($eshop_order_guid) && count($eshop_order_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eshop_order_guid when calling eshopsEshopGUIDEshopordersEshopOrderGUIDGet'
            );
        }

        $resourcePath = '/eshops/{eshopGUID}/eshoporders/{eshopOrderGUID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($eshop_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'eshopGUID' . '}',
                ObjectSerializer::toPathValue($eshop_guid),
                $resourcePath
            );
        }
        // path params
        if ($eshop_order_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'eshopOrderGUID' . '}',
                ObjectSerializer::toPathValue($eshop_order_guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eshopsEshopGUIDEshopordersPost
     *
     * Zaregistrování objednávky ze strany eshopu.
     *
     * @param  \BenefitPlus\Model\PGv2EshopOrderRequest $body DTO obsahující informace o registrované objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125646362/DTO+PGv2+Eshop+Order+Request) (required)
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BenefitPlus\Model\PGv2EshopOrderResult
     */
    public function eshopsEshopGUIDEshopordersPost($body, $x_api_key, $eshop_guid)
    {
        list($response) = $this->eshopsEshopGUIDEshopordersPostWithHttpInfo($body, $x_api_key, $eshop_guid);
        return $response;
    }

    /**
     * Operation eshopsEshopGUIDEshopordersPostWithHttpInfo
     *
     * Zaregistrování objednávky ze strany eshopu.
     *
     * @param  \BenefitPlus\Model\PGv2EshopOrderRequest $body DTO obsahující informace o registrované objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125646362/DTO+PGv2+Eshop+Order+Request) (required)
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BenefitPlus\Model\PGv2EshopOrderResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function eshopsEshopGUIDEshopordersPostWithHttpInfo($body, $x_api_key, $eshop_guid)
    {
        $returnType = '\BenefitPlus\Model\PGv2EshopOrderResult';
        $request = $this->eshopsEshopGUIDEshopordersPostRequest($body, $x_api_key, $eshop_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BenefitPlus\Model\PGv2EshopOrderResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eshopsEshopGUIDEshopordersPostAsync
     *
     * Zaregistrování objednávky ze strany eshopu.
     *
     * @param  \BenefitPlus\Model\PGv2EshopOrderRequest $body DTO obsahující informace o registrované objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125646362/DTO+PGv2+Eshop+Order+Request) (required)
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eshopsEshopGUIDEshopordersPostAsync($body, $x_api_key, $eshop_guid)
    {
        return $this->eshopsEshopGUIDEshopordersPostAsyncWithHttpInfo($body, $x_api_key, $eshop_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eshopsEshopGUIDEshopordersPostAsyncWithHttpInfo
     *
     * Zaregistrování objednávky ze strany eshopu.
     *
     * @param  \BenefitPlus\Model\PGv2EshopOrderRequest $body DTO obsahující informace o registrované objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125646362/DTO+PGv2+Eshop+Order+Request) (required)
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eshopsEshopGUIDEshopordersPostAsyncWithHttpInfo($body, $x_api_key, $eshop_guid)
    {
        $returnType = '\BenefitPlus\Model\PGv2EshopOrderResult';
        $request = $this->eshopsEshopGUIDEshopordersPostRequest($body, $x_api_key, $eshop_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eshopsEshopGUIDEshopordersPost'
     *
     * @param  \BenefitPlus\Model\PGv2EshopOrderRequest $body DTO obsahující informace o registrované objednávce. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125646362/DTO+PGv2+Eshop+Order+Request) (required)
     * @param  string $x_api_key Jedinečný bezpečnostní klíč eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-API-Key) (required)
     * @param  string $eshop_guid Jedinečný GUID eshopu. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#{eshopGUID}) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eshopsEshopGUIDEshopordersPostRequest($body, $x_api_key, $eshop_guid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling eshopsEshopGUIDEshopordersPost'
            );
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling eshopsEshopGUIDEshopordersPost'
            );
        }
        // verify the required parameter 'eshop_guid' is set
        if ($eshop_guid === null || (is_array($eshop_guid) && count($eshop_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eshop_guid when calling eshopsEshopGUIDEshopordersPost'
            );
        }

        $resourcePath = '/eshops/{eshopGUID}/eshoporders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($eshop_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'eshopGUID' . '}',
                ObjectSerializer::toPathValue($eshop_guid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uiConfirmPost
     *
     * Pokusí se již existující objednávku zaplatit.
     *
     * @param  string $x_confirm_code Ověřovací kód (zaslaný pomocí SMS uživateli). [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-ConfirmCode) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     * @param  \BenefitPlus\Model\PGv2ConfirmRequest $body DTO obsahující informace o potvrzení objednávky. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125449831/DTO+PGv2+Confirm+Request) (optional)
     * @param  string $x_return_url Url, které máme poslat na platební bránu ČSOB (při inicializaci platby na platební bráně). Na tuto url vrátí platební brána ČSOB řízení, jakmile uživatel dokončí proces platby v UI platební brány ČSOB.  Používá se při platbě doplatku privátní kartou na platební bráně ČSOB. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-Return-URL) (optional)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BenefitPlus\Model\InlineResponse200
     */
    public function uiConfirmPost($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body = null, $x_return_url = null)
    {
        list($response) = $this->uiConfirmPostWithHttpInfo($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body, $x_return_url);
        return $response;
    }

    /**
     * Operation uiConfirmPostWithHttpInfo
     *
     * Pokusí se již existující objednávku zaplatit.
     *
     * @param  string $x_confirm_code Ověřovací kód (zaslaný pomocí SMS uživateli). [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-ConfirmCode) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     * @param  \BenefitPlus\Model\PGv2ConfirmRequest $body DTO obsahující informace o potvrzení objednávky. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125449831/DTO+PGv2+Confirm+Request) (optional)
     * @param  string $x_return_url Url, které máme poslat na platební bránu ČSOB (při inicializaci platby na platební bráně). Na tuto url vrátí platební brána ČSOB řízení, jakmile uživatel dokončí proces platby v UI platební brány ČSOB.  Používá se při platbě doplatku privátní kartou na platební bráně ČSOB. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-Return-URL) (optional)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BenefitPlus\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function uiConfirmPostWithHttpInfo($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body = null, $x_return_url = null)
    {
        $returnType = '\BenefitPlus\Model\InlineResponse200';
        $request = $this->uiConfirmPostRequest($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body, $x_return_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BenefitPlus\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uiConfirmPostAsync
     *
     * Pokusí se již existující objednávku zaplatit.
     *
     * @param  string $x_confirm_code Ověřovací kód (zaslaný pomocí SMS uživateli). [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-ConfirmCode) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     * @param  \BenefitPlus\Model\PGv2ConfirmRequest $body DTO obsahující informace o potvrzení objednávky. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125449831/DTO+PGv2+Confirm+Request) (optional)
     * @param  string $x_return_url Url, které máme poslat na platební bránu ČSOB (při inicializaci platby na platební bráně). Na tuto url vrátí platební brána ČSOB řízení, jakmile uživatel dokončí proces platby v UI platební brány ČSOB.  Používá se při platbě doplatku privátní kartou na platební bráně ČSOB. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-Return-URL) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uiConfirmPostAsync($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body = null, $x_return_url = null)
    {
        return $this->uiConfirmPostAsyncWithHttpInfo($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body, $x_return_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uiConfirmPostAsyncWithHttpInfo
     *
     * Pokusí se již existující objednávku zaplatit.
     *
     * @param  string $x_confirm_code Ověřovací kód (zaslaný pomocí SMS uživateli). [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-ConfirmCode) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     * @param  \BenefitPlus\Model\PGv2ConfirmRequest $body DTO obsahující informace o potvrzení objednávky. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125449831/DTO+PGv2+Confirm+Request) (optional)
     * @param  string $x_return_url Url, které máme poslat na platební bránu ČSOB (při inicializaci platby na platební bráně). Na tuto url vrátí platební brána ČSOB řízení, jakmile uživatel dokončí proces platby v UI platební brány ČSOB.  Používá se při platbě doplatku privátní kartou na platební bráně ČSOB. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-Return-URL) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uiConfirmPostAsyncWithHttpInfo($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body = null, $x_return_url = null)
    {
        $returnType = '\BenefitPlus\Model\InlineResponse200';
        $request = $this->uiConfirmPostRequest($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body, $x_return_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uiConfirmPost'
     *
     * @param  string $x_confirm_code Ověřovací kód (zaslaný pomocí SMS uživateli). [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-ConfirmCode) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     * @param  \BenefitPlus\Model\PGv2ConfirmRequest $body DTO obsahující informace o potvrzení objednávky. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125449831/DTO+PGv2+Confirm+Request) (optional)
     * @param  string $x_return_url Url, které máme poslat na platební bránu ČSOB (při inicializaci platby na platební bráně). Na tuto url vrátí platební brána ČSOB řízení, jakmile uživatel dokončí proces platby v UI platební brány ČSOB.  Používá se při platbě doplatku privátní kartou na platební bráně ČSOB. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-Return-URL) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uiConfirmPostRequest($x_confirm_code, $x_e_shop_id, $x_e_shop_order_guid, $body = null, $x_return_url = null)
    {
        // verify the required parameter 'x_confirm_code' is set
        if ($x_confirm_code === null || (is_array($x_confirm_code) && count($x_confirm_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_confirm_code when calling uiConfirmPost'
            );
        }
        // verify the required parameter 'x_e_shop_id' is set
        if ($x_e_shop_id === null || (is_array($x_e_shop_id) && count($x_e_shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_e_shop_id when calling uiConfirmPost'
            );
        }
        // verify the required parameter 'x_e_shop_order_guid' is set
        if ($x_e_shop_order_guid === null || (is_array($x_e_shop_order_guid) && count($x_e_shop_order_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_e_shop_order_guid when calling uiConfirmPost'
            );
        }

        $resourcePath = '/_ui/_confirm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_confirm_code !== null) {
            $headerParams['X-ConfirmCode'] = ObjectSerializer::toHeaderValue($x_confirm_code);
        }
        // header params
        if ($x_e_shop_id !== null) {
            $headerParams['X-EShopID'] = ObjectSerializer::toHeaderValue($x_e_shop_id);
        }
        // header params
        if ($x_e_shop_order_guid !== null) {
            $headerParams['X-EShopOrderGUID'] = ObjectSerializer::toHeaderValue($x_e_shop_order_guid);
        }
        // header params
        if ($x_return_url !== null) {
            $headerParams['X-Return-URL'] = ObjectSerializer::toHeaderValue($x_return_url);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uiNewconfirmcodePost
     *
     * Zašle zákazníkovi nový potvrzovací kód (SMS zprávu) k již existující objednávce.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uiNewconfirmcodePost($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        $this->uiNewconfirmcodePostWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);
    }

    /**
     * Operation uiNewconfirmcodePostWithHttpInfo
     *
     * Zašle zákazníkovi nový potvrzovací kód (SMS zprávu) k již existující objednávce.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uiNewconfirmcodePostWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        $returnType = '';
        $request = $this->uiNewconfirmcodePostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation uiNewconfirmcodePostAsync
     *
     * Zašle zákazníkovi nový potvrzovací kód (SMS zprávu) k již existující objednávce.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uiNewconfirmcodePostAsync($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        return $this->uiNewconfirmcodePostAsyncWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uiNewconfirmcodePostAsyncWithHttpInfo
     *
     * Zašle zákazníkovi nový potvrzovací kód (SMS zprávu) k již existující objednávce.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uiNewconfirmcodePostAsyncWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        $returnType = '';
        $request = $this->uiNewconfirmcodePostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uiNewconfirmcodePost'
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uiNewconfirmcodePostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        // verify the required parameter 'x_bp_card_number' is set
        if ($x_bp_card_number === null || (is_array($x_bp_card_number) && count($x_bp_card_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_bp_card_number when calling uiNewconfirmcodePost'
            );
        }
        // verify the required parameter 'x_e_shop_id' is set
        if ($x_e_shop_id === null || (is_array($x_e_shop_id) && count($x_e_shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_e_shop_id when calling uiNewconfirmcodePost'
            );
        }
        // verify the required parameter 'x_e_shop_order_guid' is set
        if ($x_e_shop_order_guid === null || (is_array($x_e_shop_order_guid) && count($x_e_shop_order_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_e_shop_order_guid when calling uiNewconfirmcodePost'
            );
        }

        $resourcePath = '/_ui/_newconfirmcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_bp_card_number !== null) {
            $headerParams['X-BPCardNumber'] = ObjectSerializer::toHeaderValue($x_bp_card_number);
        }
        // header params
        if ($x_e_shop_id !== null) {
            $headerParams['X-EShopID'] = ObjectSerializer::toHeaderValue($x_e_shop_id);
        }
        // header params
        if ($x_e_shop_order_guid !== null) {
            $headerParams['X-EShopOrderGUID'] = ObjectSerializer::toHeaderValue($x_e_shop_order_guid);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uiOrderPost
     *
     * Vytvoří objednávku.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BenefitPlus\Model\PGv2OrderResult
     */
    public function uiOrderPost($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        list($response) = $this->uiOrderPostWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);
        return $response;
    }

    /**
     * Operation uiOrderPostWithHttpInfo
     *
     * Vytvoří objednávku.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BenefitPlus\Model\PGv2OrderResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function uiOrderPostWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        $returnType = '\BenefitPlus\Model\PGv2OrderResult';
        $request = $this->uiOrderPostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BenefitPlus\Model\PGv2OrderResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uiOrderPostAsync
     *
     * Vytvoří objednávku.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uiOrderPostAsync($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        return $this->uiOrderPostAsyncWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uiOrderPostAsyncWithHttpInfo
     *
     * Vytvoří objednávku.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uiOrderPostAsyncWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        $returnType = '\BenefitPlus\Model\PGv2OrderResult';
        $request = $this->uiOrderPostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uiOrderPost'
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uiOrderPostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        // verify the required parameter 'x_bp_card_number' is set
        if ($x_bp_card_number === null || (is_array($x_bp_card_number) && count($x_bp_card_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_bp_card_number when calling uiOrderPost'
            );
        }
        // verify the required parameter 'x_e_shop_id' is set
        if ($x_e_shop_id === null || (is_array($x_e_shop_id) && count($x_e_shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_e_shop_id when calling uiOrderPost'
            );
        }
        // verify the required parameter 'x_e_shop_order_guid' is set
        if ($x_e_shop_order_guid === null || (is_array($x_e_shop_order_guid) && count($x_e_shop_order_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_e_shop_order_guid when calling uiOrderPost'
            );
        }

        $resourcePath = '/_ui/_order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_bp_card_number !== null) {
            $headerParams['X-BPCardNumber'] = ObjectSerializer::toHeaderValue($x_bp_card_number);
        }
        // header params
        if ($x_e_shop_id !== null) {
            $headerParams['X-EShopID'] = ObjectSerializer::toHeaderValue($x_e_shop_id);
        }
        // header params
        if ($x_e_shop_order_guid !== null) {
            $headerParams['X-EShopOrderGUID'] = ObjectSerializer::toHeaderValue($x_e_shop_order_guid);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uiPreorderPost
     *
     * Nasimuluje vytvoření objednávky.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BenefitPlus\Model\PGv2PreOrderResult
     */
    public function uiPreorderPost($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        list($response) = $this->uiPreorderPostWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);
        return $response;
    }

    /**
     * Operation uiPreorderPostWithHttpInfo
     *
     * Nasimuluje vytvoření objednávky.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \BenefitPlus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BenefitPlus\Model\PGv2PreOrderResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function uiPreorderPostWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        $returnType = '\BenefitPlus\Model\PGv2PreOrderResult';
        $request = $this->uiPreorderPostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BenefitPlus\Model\PGv2PreOrderResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uiPreorderPostAsync
     *
     * Nasimuluje vytvoření objednávky.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uiPreorderPostAsync($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        return $this->uiPreorderPostAsyncWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uiPreorderPostAsyncWithHttpInfo
     *
     * Nasimuluje vytvoření objednávky.
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uiPreorderPostAsyncWithHttpInfo($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        $returnType = '\BenefitPlus\Model\PGv2PreOrderResult';
        $request = $this->uiPreorderPostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uiPreorderPost'
     *
     * @param  string $x_bp_card_number Číslo BP karty, ve formátu s pomlčkami. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-BPCardNumber) (required)
     * @param  string $x_e_shop_id GUID eshopu, ze kterého je požadavek zaslán. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopID) (required)
     * @param  string $x_e_shop_order_guid Jedinečné GUID eshop objednávky, přidělené registračním endpointem. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1448902683/Platebn+br+na+pro+e-shopy+v2+-+HTTP+hlavi+ky+a+URL+parametry#X-EShopOrderGUID) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uiPreorderPostRequest($x_bp_card_number, $x_e_shop_id, $x_e_shop_order_guid)
    {
        // verify the required parameter 'x_bp_card_number' is set
        if ($x_bp_card_number === null || (is_array($x_bp_card_number) && count($x_bp_card_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_bp_card_number when calling uiPreorderPost'
            );
        }
        // verify the required parameter 'x_e_shop_id' is set
        if ($x_e_shop_id === null || (is_array($x_e_shop_id) && count($x_e_shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_e_shop_id when calling uiPreorderPost'
            );
        }
        // verify the required parameter 'x_e_shop_order_guid' is set
        if ($x_e_shop_order_guid === null || (is_array($x_e_shop_order_guid) && count($x_e_shop_order_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_e_shop_order_guid when calling uiPreorderPost'
            );
        }

        $resourcePath = '/_ui/_preorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_bp_card_number !== null) {
            $headerParams['X-BPCardNumber'] = ObjectSerializer::toHeaderValue($x_bp_card_number);
        }
        // header params
        if ($x_e_shop_id !== null) {
            $headerParams['X-EShopID'] = ObjectSerializer::toHeaderValue($x_e_shop_id);
        }
        // header params
        if ($x_e_shop_order_guid !== null) {
            $headerParams['X-EShopOrderGUID'] = ObjectSerializer::toHeaderValue($x_e_shop_order_guid);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
